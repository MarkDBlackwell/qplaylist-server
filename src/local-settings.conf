# Copyright (C) 2024 Mark D. Blackwell.
#   All rights reserved.
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

#  Caching:
# https://csswizardry.com/2019/03/cache-control-for-civilians/
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#vary
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation#the_vary_response_header
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
# https://httpd.apache.org/docs/2.4/mod/mod_expires.html
# https://www.mnot.net/cache_docs/

#  Compression:
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
# https://httpd.apache.org/docs/2.4/mod/mod_deflate.html#deflatealteretag
# https://httpd.apache.org/docs/2.4/mod/mod_deflate.html#precompressed
# https://httpd.apache.org/docs/2.4/mod/mod_mime.html#addencoding

#  DirectoryMatch and RewriteRule
# https://httpd.apache.org/docs/2.4/mod/core.html#include
# https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html#rewritebase
# https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html#rewritemap
# https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html#rewriteoptions
# https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html#rewriterule
# https://httpd.apache.org/docs/2.4/rewrite/rewritemap.html
# https://stackoverflow.com/questions/43051650/identical-rewrite-rules-for-multiple-websites-in-apache-conf
# https://stackoverflow.com/questions/688100/same-rules-for-multiple-directories-in-apache/688180#688180

#  Information, general:
# https://cwiki.apache.org/confluence/display/httpd
# https://httpd.apache.org/docs/2.4/mod/
# https://httpd.apache.org/docs/2.4/mod/directive-dict.html
# https://httpd.apache.org/docs/2.4/mod/directives.html
# https://httpd.apache.org/docs/2.4/mod/mod_negotiation.html#typemaps
# https://httpd.apache.org/docs/2.4/sections.html
# https://httpd.apache.org/docs/2.4/sections.html#merging
# https://mod-rewrite.org/book/chapters/07_rewritecond.html

#  Inheritance:
# https://httpd.apache.org/docs/2.4/mod/mod_rewrite.html#rewriteoptions
# https://stackoverflow.com/questions/15868763/what-does-rewriteoptions-inherit-in-htaccess-file-do/15868802#15868802

#  Logging:
# https://httpd.apache.org/docs/2.4/logs.html
# https://httpd.apache.org/docs/2.4/mod/core.html#loglevel

#  Merging. How Apache merges sections:
# https://httpd.apache.org/docs/2.4/sections.html#merging

# TODO

#  What is the match name for the entire string? See:
# https://httpd.apache.org/docs/2.4/sections.html#file-and-web
#
##<DirectoryMatch "^/var/www/combined/(?<SITENAME>[^/]+)">
##	Require ldap-group "cn=%{env:MATCH_SITENAME},ou=combined,o=Example"
##</DirectoryMatch>

RewriteEngine On

KeepAlive On
KeepAliveTimeout 300ms

AddEncoding x-gzip .gz

# Display the Apache server's status:
<Location /server-status>
	SetHandler server-status
# My home IP address:
	Require ip 69.143.45.52  192.168.0.104
</Location>

# Redirect to WTMD all requests without a sub-URI:
<LocationMatch ^/(|index.html?)$>
	RewriteRule ^ https://wtmd.org/radio [L,R=307]
</LocationMatch>

# Unhide the public-facing directory:
<Directory /var/www/html>
	Require all granted
</Directory>

# Caching:
# For old user agents, set the Expires header.
# We'll overwrite its Cache-Control part.
ExpiresActive On

# Later, when it's all working, set this to 1 day:
##ExpiresDefault "access plus 1 day"
# When actively developing, set this to 10 minutes:
ExpiresDefault "access plus 10 minutes"

# Later, when it's all working, set this to 1 day:
## Header set Cache-Control "max-age=86400, stale-while-revalidate=60, stale-if-error=60"
# When actively developing, set this to 10 minutes:
Header set Cache-Control "max-age=600, stale-while-revalidate=60, stale-if-error=60"

# Match the entire path:
<DirectoryMatch ^/var/www/html/(robots.txt|favicon[^/]*)$>
	ExpiresDefault "access plus 1 day"
	Header set Cache-Control "max-age=86400, stale-while-revalidate=60, stale-if-error=60"
</DirectoryMatch>

<Directory /var/www/html/radiodns>
	<FilesMatch \.(jpeg|jpg|png)$>
		ExpiresDefault "access plus 1 year"
		Header set Cache-Control "public, max-age=31536000, immutable"
	</FilesMatch>
</Directory>

<DirectoryMatch ^/var/www/html/(app|app-dark|like-dev|player|playlist)/dynamic/[^/]*$>
	ExpiresDefault "access plus 4 seconds"
	Header set Cache-Control "max-age=4, stale-while-revalidate=60, stale-if-error=60, no-transform, must-understand, no-store"
	Header set Connection close
</DirectoryMatch>

<Directory /var/www/html/wtmdapp>
	<FilesMatch ^LatestFive(|HD2)\.json\.gz$>
		ExpiresDefault "access plus 4 seconds"
		Header set Cache-Control "max-age=4, stale-while-revalidate=60, stale-if-error=60, no-transform, must-understand, no-store"
		Header set Connection close
	</FilesMatch>
</Directory>

<Directory /var/www/html/onair>
	<Files schedule.json>
		ExpiresDefault "access plus 0 seconds"
		Header set Cache-Control no-cache
		Header set Connection close
	</Files>
</Directory>

<Directory /var/www/html/remember>
	<Files LatestFew.json.gz>
		ExpiresDefault "access plus 0 seconds"
		Header set Cache-Control no-cache
		Header set Connection close
	</Files>
</Directory>

# Scheme:
# Can't be combined in a DirectoryMatch.
# The WTMD server's Access-Control allows HTTPS scheme only.
# Disable HTTP.
<Directory /var/www/html/like-dev>
	RewriteCond "%{HTTPS}" off
	RewriteRule ^ "https://%{HTTP_HOST}%{REQUEST_URI}" [L,R=301]
</Directory>

<Directory /var/www/html/remember>
	RewriteCond "%{HTTPS}" off
	RewriteRule ^ "https://%{HTTP_HOST}%{REQUEST_URI}" [L,R=301]
</Directory>

# For the developer of the former smartphone app, simplify the scheme. (My idea).
# Disable HTTPS.
<Directory /var/www/html/wtmdapp>
	RewriteCond "%{HTTPS}" on
	RewriteRule ^ "http://%{HTTP_HOST}%{REQUEST_URI}" [L,R=301]
</Directory>

# Other:
# Can't be combined in a DirectoryMatch.
# Enable uploading precompressed QPlaylist song files.
<Directory /var/www/html/app/dynamic>
	# Can't be extracted.
	<FilesMatch ^LatestFiveNew(|HD2)\.html\.gz$>
		# Serve correct encoding type.
		Header append Content-Encoding gzip

		# Force gzipped & non-gzipped files to be cached separately.
		Header append Vary Accept-Encoding
	</FilesMatch>

	# If the client accepts gzip
	# and the requested gzip-compressed QPlaylist file exists...
	RewriteCond "%{HTTP:Accept-encoding}" gzip
	RewriteCond "%{REQUEST_FILENAME}.gz" -s

	# Append ".gz".
	RewriteRule ^LatestFiveNew(|HD2)\.html$ $0.gz

	# Serve the correct media type, and prevent mod_deflate double gzip.
	RewriteRule ^LatestFiveNew(|HD2)\.html\.gz$ - [T=text/html,E=no-gzip:1]
</Directory>

<Directory /var/www/html/app-dark/dynamic>
	# Can't be extracted.
	<FilesMatch ^LatestFiveNew(|HD2)\.html\.gz$>
		# Serve correct encoding type.
		Header append Content-Encoding gzip

		# Force gzipped & non-gzipped files to be cached separately.
		Header append Vary Accept-Encoding
	</FilesMatch>

	# If the client accepts gzip
	# and the requested gzip-compressed QPlaylist file exists...
	RewriteCond "%{HTTP:Accept-encoding}" gzip
	RewriteCond "%{REQUEST_FILENAME}.gz" -s

	# Append ".gz".
	RewriteRule ^LatestFiveNew(|HD2)\.html$ $0.gz

	# Serve the correct media type, and prevent mod_deflate double gzip.
	RewriteRule ^LatestFiveNew(|HD2)\.html\.gz$ - [T=text/html,E=no-gzip:1]
</Directory>

<Directory /var/www/html/like-dev/dynamic>
	# Can't be extracted.
	<FilesMatch ^LatestFiveNew(|HD2)\.html\.gz$>
		# Serve correct encoding type.
		Header append Content-Encoding gzip

		# Force gzipped & non-gzipped files to be cached separately.
		Header append Vary Accept-Encoding
	</FilesMatch>

	# If the client accepts gzip
	# and the requested gzip-compressed QPlaylist file exists...
	RewriteCond "%{HTTP:Accept-encoding}" gzip
	RewriteCond "%{REQUEST_FILENAME}.gz" -s

	# Append ".gz".
	RewriteRule ^LatestFiveNew(|HD2)\.html$ $0.gz

	# Serve the correct media type, and prevent mod_deflate double gzip.
	RewriteRule ^LatestFiveNew(|HD2)\.html\.gz$ - [T=text/html,E=no-gzip:1]
</Directory>

<Directory /var/www/html/player/dynamic>
	# Can't be extracted.
	<FilesMatch ^LatestFive(|New)(|HD2)\.html\.gz$>
		# Serve correct encoding type.
		Header append Content-Encoding gzip

		# Force gzipped & non-gzipped files to be cached separately.
		Header append Vary Accept-Encoding
	</FilesMatch>

	# If the client accepts gzip
	# and the requested gzip-compressed QPlaylist file exists...
	RewriteCond "%{HTTP:Accept-encoding}" gzip
	RewriteCond "%{REQUEST_FILENAME}.gz" -s

	# Append ".gz".
	RewriteRule ^LatestFive(|New)(|HD2)\.html$ $0.gz

	# Serve the correct media type, and prevent mod_deflate double gzip.
	RewriteRule ^LatestFive(|New)(|HD2)\.html\.gz$ - [T=text/html,E=no-gzip:1]
</Directory>

<Directory /var/www/html/playlist>
	# The PHP program is accessed (always) by requesting append.json.
	# This eases development by allowing optional access through the local filesystem.
	RewriteRule ^append\.json$ append.php [C]

	# Redirect to the WTMD server to handle PHP.
	RewriteRule ^append\.php$ https://wtmd.org/like/$0 [L,R=308]
</Directory>

<Directory /var/www/html/playlist/dynamic>
	# Can't be extracted.
	<FilesMatch ^(LatestFive|LatestFiveNew|NowPlaying|RecentSongs)(|HD2)\.html\.gz$>
		# Serve correct encoding type.
		Header append Content-Encoding gzip

		# Force gzipped & non-gzipped files to be cached separately.
		Header append Vary Accept-Encoding
	</FilesMatch>

	# Can't be extracted.
	<FilesMatch ^LatestFive(|HD2)\.json\.gz$>
		# Serve correct encoding type.
		Header append Content-Encoding gzip

		# Force gzipped & non-gzipped files to be cached separately.
		Header append Vary Accept-Encoding
	</FilesMatch>

	# If the client accepts gzip
	# and the requested gzip-compressed QPlaylist file exists...
	RewriteCond "%{HTTP:Accept-encoding}" gzip
	RewriteCond "%{REQUEST_FILENAME}.gz" -s

	# Append ".gz".
	RewriteRule ^(LatestFive|LatestFiveNew|NowPlaying|RecentSongs)(|HD2)\.html$ $0.gz

	# Serve the correct media type, and prevent mod_deflate double gzip.
	RewriteRule ^(LatestFive|LatestFiveNew|NowPlaying|RecentSongs)(|HD2)\.html\.gz$ - [T=text/html,E=no-gzip:1]

	# If the client accepts gzip
	# and the requested gzip-compressed QPlaylist file exists...
	RewriteCond "%{HTTP:Accept-encoding}" gzip
	RewriteCond "%{REQUEST_FILENAME}.gz" -s

	# Append ".gz".
	RewriteRule ^LatestFive(|HD2)\.json$ $0.gz

	# Serve the correct media type, and prevent mod_deflate double gzip.
	RewriteRule ^LatestFive(|HD2)\.json\.gz$ - [T=application/json,E=no-gzip:1]
</Directory>

<Directory /var/www/html/remember>
	# Can't be extracted.
	# The PHP program is accessed (always) by requesting append.json.
	# This eases development by allowing optional access through the local filesystem.
	RewriteRule ^append\.json$ append.php [C]

	# Redirect to the WTMD server to handle PHP.
	RewriteRule ^append\.php$ https://wtmd.org/remember/$0 [QSA,L]

	# Can't be extracted.
	# Enable uploading of QPlaylist's precompressed JSON file which contains the latest five songs.
	<Files LatestFew.json.gz>
		# Serve correct encoding type.
		Header append Content-Encoding gzip

		# Force gzipped & non-gzipped files to be cached separately.
		Header append Vary Accept-Encoding
	</Files>

	# If the client accepts gzip
	# and the requested gzip-compressed QPlaylist file exists...
	RewriteCond "%{HTTP:Accept-encoding}" gzip
	RewriteCond "%{REQUEST_FILENAME}.gz" -s

	# Append ".gz".
	RewriteRule ^LatestFew\.json$ $0.gz

	# Serve the correct media type, and prevent mod_deflate double gzip.
	RewriteRule ^LatestFew\.json\.gz$ - [T=application/json,E=no-gzip:1]
</Directory>

<Directory /var/www/html/wtmdapp>
	# Can't be extracted.
	<FilesMatch ^LatestFive(|HD2)\.json\.gz$>
		# Serve correct encoding type.
		Header append Content-Encoding gzip

		# Force gzipped & non-gzipped files to be cached separately.
		Header append Vary Accept-Encoding
	</FilesMatch>

	# If the gzip compressed QPlaylist files exist
	# and the client accepts gzip...
	RewriteCond "%{HTTP:Accept-encoding}" gzip
	RewriteCond "%{REQUEST_FILENAME}.gz" -s

	# Append ".gz".
	RewriteRule ^LatestFive(|HD2)\.json$ $0.gz

	# Serve the correct media type, and prevent mod_deflate double gzip.
	RewriteRule ^LatestFive(|HD2)\.json\.gz$ - [T=application/json,E=no-gzip:1]
</Directory>

<Directory /var/www/html/test-directory>
   LogLevel debug
   Header set Cache-Control no-store
   RewriteCond "%{REQUEST_FILENAME}.gz" -s
   RewriteRule ^test\.html$ $0.gz
   RewriteRule ^test\.html\.gz$ - [T=text/html,E=no-gzip:1]
</Directory>

<DirectoryMatch "^/var/www/html/test-match">
   LogLevel debug
   Header set Cache-Control no-store
   RewriteCond "%{REQUEST_FILENAME}.gz" -s
   RewriteRule ^test\.html$ $0.gz
   RewriteRule ^test\.html\.gz$ - [T=text/html,E=no-gzip:1]
</DirectoryMatch>

# New and simple:
<Directory /var/www/html/test-simple-dir>
   LogLevel debug
   Header set Cache-Control no-store
   RewriteCond "%{REQUEST_FILENAME}.new" -s
   RewriteRule ^test\.html$ test.html.new [END]
</Directory>

<DirectoryMatch "^/var/www/html/test-simple-match">
   LogLevel debug
   Header set Cache-Control no-store
   RewriteCond "%{REQUEST_FILENAME}.new" -s
   RewriteRule ^test\.html$ test.html.new [END]
</DirectoryMatch>
